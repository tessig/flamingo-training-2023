// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

//go:build !graphql
// +build !graphql

package graphql

import (
	"context"

	graphql1 "flamingo.me/graphql"
	"flamingo.me/training/src/openweather/domain"
	graphql2 "flamingo.me/training/src/openweather/interfaces/graphql"
)

var _ ResolverRoot = new(rootResolver)

type rootResolver struct {
	rootResolverMutation *rootResolverMutation
	rootResolverQuery    *rootResolverQuery
}

func (r *rootResolver) Inject(
	rootResolverMutation *rootResolverMutation,
	rootResolverQuery *rootResolverQuery,

) {
	r.rootResolverMutation = rootResolverMutation
	r.rootResolverQuery = rootResolverQuery

}

func (r *rootResolver) directives() DirectiveRoot {
	return DirectiveRoot{}
}

func (r *rootResolver) Mutation() MutationResolver {
	return r.rootResolverMutation
}
func (r *rootResolver) Query() QueryResolver {
	return r.rootResolverQuery
}

type rootResolverMutation struct {
	resolveFlamingo func(ctx context.Context) (*string, error)
}

func (r *rootResolverMutation) Inject(
	mutationFlamingo *graphql1.FlamingoQueryResolver,
) {
	r.resolveFlamingo = mutationFlamingo.Flamingo
}

func (r *rootResolverMutation) Flamingo(ctx context.Context) (*string, error) {
	return r.resolveFlamingo(ctx)
}

type rootResolverQuery struct {
	resolveFlamingo           func(ctx context.Context) (*string, error)
	resolveOpenweatherWeather func(ctx context.Context, city string) (*domain.Weather, error)
}

func (r *rootResolverQuery) Inject(
	queryFlamingo *graphql1.FlamingoQueryResolver,
	queryOpenweatherWeather *graphql2.WeatherResolver,
) {
	r.resolveFlamingo = queryFlamingo.Flamingo
	r.resolveOpenweatherWeather = queryOpenweatherWeather.Openweather_Weather
}

func (r *rootResolverQuery) Flamingo(ctx context.Context) (*string, error) {
	return r.resolveFlamingo(ctx)
}
func (r *rootResolverQuery) OpenweatherWeather(ctx context.Context, city string) (*domain.Weather, error) {
	return r.resolveOpenweatherWeather(ctx, city)
}

func direct(root *rootResolver) map[string]interface{} {
	return map[string]interface{}{
		"Mutation.Flamingo":        root.Mutation().Flamingo,
		"Query.Flamingo":           root.Query().Flamingo,
		"Query.OpenweatherWeather": root.Query().OpenweatherWeather,
	}
}
